# -*- coding: utf-8 -*-
"""Car Price Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdRN-p7nbRHLMnw3y0R5bPx28yL3SkZd
"""



"""Importing Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
from sklearn.preprocessing import StandardScaler



"""Data collectione and Preprocessing"""

car_dataset= pd.read_csv('/content/car data.csv')
car_dataset.head()



car_dataset.shape

#gettimg information about the dataset
car_dataset.info()

#checking for missing values
car_dataset.isnull().sum()

#distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Selling_type.value_counts()) # Changed 'Selling_Type' to 'Selling_Price'
print(car_dataset.Transmission.value_counts())



"""Encoding Categorical Data"""

#encoding "Fuel_type " column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

#encoding "Selling_type " column
car_dataset.replace({'Selling_type':{'Dealer':0,'Individual':1}},inplace=True)

#encoding "Transmission" column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()



"""Splittting Data and Target"""

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset.Selling_Price

print(X)
print(Y)



"""Splitting Training and Test data"""

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1, random_state=2)



"""Model Training"""

#loading the linear regreesion model
line_reg_model = LinearRegression()

line_reg_model.fit(X_train,y_train)



"""Model evaluation

"""

#prediction on training data
train_data_prediction = line_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(y_train, train_data_prediction)
print("R squared Error : ", error_score)



"""Visualize prices and train_data_prediction"""

plt.scatter(y_train, train_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on Test data
test_data_prediction = line_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()



"""Lasso Reggresion"""



#loading the linear regreesion model
las_reg_model = Lasso()

las_reg_model.fit(X_train,y_train)



"""Model evaluation

"""

#prediction on training data
train_data_prediction = las_reg_model.predict(X_train)

# R squared error
error_score = metrics.r2_score(y_train, train_data_prediction)
print("R squared Error : ", error_score)



"""Visualize prices and train_data_prediction"""

plt.scatter(y_train, train_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

# prediction on Test data
test_data_prediction = las_reg_model.predict(X_test)

# R squared error
error_score = metrics.r2_score(y_test, test_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices vs Predicted Prices")
plt.show()

